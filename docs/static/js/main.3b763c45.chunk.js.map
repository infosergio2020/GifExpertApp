{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","console","log","preventDefault","trim","length","cats","className","type","value","onChange","target","getGifs","category","key","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","defaultCategories","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAqBA,OACI,uBAAMC,SAfW,SAACC,GAClBC,QAAQC,IAAI,cAAcL,GAC1BG,EAAEG,iBAECN,EAAWO,OAAOC,OAAS,GAC1BV,GAAe,SAAAW,GAAI,OAAKT,GAAL,mBAAmBS,OACtCR,EAAc,KAGdA,EAAc,KAMlB,UACI,kCAAKD,EAAL,OACA,uBAAOU,UAAU,yBACVC,KAAK,OACLC,MAAOZ,EACPa,SAzBW,SAACV,GACvBF,EAAeE,EAAEW,OAAOF,OACxBR,QAAQC,IAAI,oC,+BCTPU,EAAO,uCAAG,WAAQC,EAAUJ,EAAOK,GAAzB,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUJ,GAD7C,kBACgEJ,EADhE,oBACiFK,GADjF,SAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QARtB,kBAWZM,GAXY,4CAAH,0DCGPO,EAAc,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAMV,EAAU,EAAVA,IAChC,OACI,sBAAKT,UAAU,0CAAf,UACI,qBAAKuB,IAAKd,EAAKe,IAAKL,IACpB,kCAAKA,EAAL,WCFCM,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SACrB,ECHwB,SAAEA,GAC1B,IAEA,EAA0BjB,mBAAS,CAC/ByB,KAAK,GACLY,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACNxB,EAAQC,EAPE,GADF,oCASHwB,MAAM,SAAAC,GACCH,EAAS,CACLd,KAAKiB,EACLL,SAAQ,SAGzB,CAAEpB,IAEEqB,EDfuBK,CAAa1B,GAA/Bc,EAAZ,EAAON,KAAYY,EAAnB,EAAmBA,QAEnB,OACI,qCACI,6BAAKpB,IACJoB,GAAW,4CACZ,qBAAK1B,UAAU,YAAf,SAEQoB,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEQ/Be,EAlBM,SAAC,GAA6B,IAAD,IAA3BC,yBAA2B,MAAP,GAAO,EAE9C,EAAoC7C,mBAAU6C,GAA9C,mBAAOC,EAAP,KAAmB/C,EAAnB,KACA,OACQ,qCACE,oBAAIY,UAAU,eAAd,4BACA,cAAC,EAAD,CAAaZ,cAAeA,IAC5B,uBACA,6BAEM+C,EAAWnB,KAAK,SAAAV,GAAQ,OACtB,cAAC,EAAD,CAA0BA,SAAUA,GAArBA,Y,MCTrC8B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.3b763c45.chunk.js","sourcesContent":["import React,{ useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e)=>{\r\n        setInputValue( e.target.value );\r\n        console.log('handleInputChange llamado');\r\n    }\r\n\r\n    const handleSubmit = (e)=>{\r\n        console.log('hadleSubmit',inputValue);\r\n        e.preventDefault();\r\n        \r\n        if(inputValue.trim().length > 2 ){\r\n            setCategories( cats => [inputValue,...cats]);\r\n            setInputValue('');\r\n        }else {\r\n            // alert('Debe tener mas de 2 caracteres');\r\n            setInputValue('');\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <p> {inputValue} </p>\r\n            <input className=\"input input-background\" \r\n                   type=\"text\"\r\n                   value={inputValue}\r\n                   onChange={handleInputChange}>\r\n            </input>\r\n        </form>\r\n    )\r\n}\r\n\r\n// con esto prevengo que alguien que reutilize mi funcion se olvide de mandar una funcion como parametro\r\nAddCategory.propTypes = { \r\n    setCategories: PropTypes.func.isRequired,\r\n}","export const getGifs = async ( category, value, key) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=${value}&api_key=${key}`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const GifGridItem = ( {title,url} ) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__flipInX\">\r\n            <img src={url} alt={title}></img>\r\n            <p> {title} </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n    title: PropTypes.string.isRequired, //indico que solo acepta este tipo\r\n    url: PropTypes.string.isRequired\r\n}\r\n\r\n\r\n/*\r\n    1. Enzyme\r\n    2. Enzyme to Json\r\n    3. Debe de mostrar el componente correctamente\r\n        * shallow\r\n        * wrapper\r\n        * wrapper .toMatchSnapshot()\r\n*/","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nexport const GifGrid = ({category}) => {\r\n    const {data:images,loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            {loading && <p>Cargando...</p>}\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem key={img.id} {...img}/>\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired\r\n}","import { useState,useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const key = 'dpoD26YubbJ6ixDgvXuW7Qc9cH7vVvxc';\r\n    const value = 10;\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(()=>{\r\n        getGifs(category,value,key)\r\n            .then( imgs => {\r\n                    setState({\r\n                        data:imgs,\r\n                        loading:false\r\n                    });\r\n            })\r\n    }, [ category ]);\r\n\r\n    return state;\r\n}","import { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n// import PropTypes from 'prop-types';\r\n\r\nconst GifExpertApp = ({defaultCategories = []})=> {\r\n    // const [categories, setCategories] = useState(['One Punch'])\r\n    const [categories, setCategories] = useState( defaultCategories );\r\n    return (\r\n            <>\r\n              <h1 className=\"header-title\"> GifExpertApp </h1>\r\n              <AddCategory setCategories={setCategories}/>\r\n              <hr/>\r\n              <ol>\r\n                {\r\n                    categories.map( category => (\r\n                      <GifGrid key={ category } category={category}/>\r\n                    ))\r\n                }\r\n              </ol>\r\n            </>\r\n        )\r\n}\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp'\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}